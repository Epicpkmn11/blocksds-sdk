# SPDX-License-Identifier: Zlib
#
# Copyright (c) 2023 Antonio Niño Díaz

ifeq ($(strip $(BLOCKSDS)),)
    $(error "Environment variable BLOCKSDS not found")
endif

# Source code paths
# -----------------

SOURCEDIRS	:= avr-libstdcpp/src
INCLUDEDIRS	:= avr-libstdcpp/include

SOURCES_CPP	:= $(shell find -L $(SOURCEDIRS) -name "*.cc") \
		   avr-libstdcpp/examples/common/cxxabi.cpp \
		   avr-libstdcpp/examples/common/new.cpp

# Defines passed to all files
# ---------------------------

DEFINES		:=

# Libraries
# ---------

LIBDIRS		:= $(BLOCKSDS)/libs/libc7

# Build artifacts
# ---------------

NAME		:= libstdc++7
BUILDDIR	:= build/arm7
ARCHIVE		:= lib/$(NAME).a

# Tools
# -----

PREFIX		:= arm-none-eabi-
CC		:= $(PREFIX)gcc
CXX		:= $(PREFIX)g++
AR		:= ar
MKDIR		:= mkdir
RM		:= rm -rf

# Verbose flag
# ------------

ifeq ($(VERBOSE),1)
V		:=
else
V		:= @
endif

# Compiler and linker flags
# -------------------------

DEFINES		+= -D__NDS__ -DARM7

ARCH		:= -mcpu=arm7tdmi -mtune=arm7tdmi

WARNFLAGS	:= -Wall -Wextra

INCLUDEFLAGS	:= $(foreach path,$(INCLUDEDIRS),-I$(path)) \
		   $(foreach path,$(LIBDIRS),-I$(path)/include)

CXXFLAGS	+= -std=gnu++17 $(WARNFLAGS) $(DEFINES) $(ARCH) \
		   -mthumb -mthumb-interwork $(INCLUDEFLAGS) -O2 \
		   -ffunction-sections -fdata-sections \
		   -fno-exceptions -fno-rtti \
		   -fomit-frame-pointer

# Intermediate build files
# ------------------------

OBJS	:= $(addsuffix .o,$(addprefix $(BUILDDIR)/,$(SOURCES_CPP)))

DEPS		:= $(OBJS:.o=.d)

# Targets
# -------

.PHONY: all clean

all: $(ARCHIVE)

$(ARCHIVE): $(OBJS)
	@echo "  AR.9    $@"
	@$(MKDIR) -p $(@D)
	$(V)$(AR) rcs $@ $(OBJS)

clean:
	@echo "  CLEAN.9"
	$(V)$(RM) $(ARCHIVE) $(BUILDDIR)

# Rules
# -----

$(BUILDDIR)/%.cc.o : %.cc
	@echo "  CXX.7   $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CC) $(CXXFLAGS) -MMD -MP -c -o $@ $<

$(BUILDDIR)/%.cpp.o : %.cpp
	@echo "  CXX.7   $<"
	@$(MKDIR) -p $(@D)
	$(V)$(CXX) $(CXXFLAGS) -MMD -MP -c -o $@ $<

# Include dependency files if they exist
# --------------------------------------

-include $(DEPS)
